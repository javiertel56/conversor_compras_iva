import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import pandas as pd

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Inventario Tiendas")
        self.geometry("700x500")
        self.configure(bg="#1c2c47")
        self.selected_file = None
        self.create_tabs()

    def create_tabs(self):
        style = ttk.Style(self)
        style.theme_use('clam')

        dark_bg = "#1c2c47"
        dark_fg = "#f5f6fa"
        tab_bg = "#1c2c47"
        tab_active = "#1c2c47"

        style.configure('TNotebook', background=dark_bg, borderwidth=0)
        style.configure('TNotebook.Tab', background=tab_bg, foreground=dark_fg, font=('Segoe UI', 12, 'bold'), padding=[10, 5])
        style.map('TNotebook.Tab',
                  background=[('selected', tab_active)],
                  foreground=[('selected', '#00b894')])

        style.configure('TFrame', background=dark_bg)
        style.configure('TLabel', background=dark_bg, foreground=dark_fg, font=('Segoe UI', 10))

        style.configure('Blue.TButton',
                        background='#2980b9',
                        foreground='white',
                        borderwidth=0,
                        font=('Segoe UI', 11, 'bold'),
                        padding=10,
                        relief='flat')
        style.map('Blue.TButton',
                  background=[('active', '#1c5980')],
                  foreground=[('active', 'white')])

        style.configure('Yellow.TButton',
                        background='#fdcb6e',
                        foreground='#1c2c47',
                        borderwidth=0,
                        font=('Segoe UI', 11, 'bold'),
                        padding=10,
                        relief='flat')
        style.map('Yellow.TButton',
                  background=[('active', '#e1b84b')],
                  foreground=[('active', '#1c2c47')])

        style.configure('Green.TButton',
                        background='#00b894',
                        foreground='white',
                        borderwidth=0,
                        font=('Segoe UI', 11, 'bold'),
                        padding=10,
                        relief='flat')
        style.map('Green.TButton',
                  background=[('active', '#00916e')],
                  foreground=[('active', 'white')])

        notebook = ttk.Notebook(self)
        notebook.pack(expand=1, fill='both', padx=20, pady=20)

        rm_frame = ttk.Frame(notebook)
        tco_frame = ttk.Frame(notebook)

        notebook.add(rm_frame, text='Rosa Marcela')
        notebook.add(tco_frame, text='Tcomunicamos')

        self.create_tab_content(rm_frame, "Tabulador iva - Rosa Marcela")
        self.create_tab_content(tco_frame, "Tabulador iva - Tcomunicamos")

    def create_tab_content(self, frame, titulo):
        lbl_titulo = ttk.Label(frame, text=titulo, background="#1c2c47", foreground="#f5f6fa", font=('Segoe UI', 16, 'bold'))
        lbl_titulo.pack(pady=(10, 20))

        btn_frame = tk.Frame(frame, bg="#1c2c47")
        btn_frame.pack(pady=10)

        lbl_file = ttk.Label(frame, text="Archivo seleccionado: Ninguno", background="#1c2c47", foreground="#f5f6fa", font=('Segoe UI', 10))
        lbl_file.pack(pady=(10, 20))

        def subir_archivo():
            file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx;*.xls")])
            if file_path:
                self.selected_file = file_path
                lbl_file.config(text=f"Archivo seleccionado: {file_path}")

        def procesar_excel():
            if not self.selected_file:
                messagebox.showwarning("Advertencia", "Primero selecciona un archivo.")
                return
            try:
                destino = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
                if not destino:
                    return
                convertir_excel(self.selected_file, destino)
                messagebox.showinfo("Éxito", "Archivo procesado y guardado correctamente.")
            except Exception as e:
                messagebox.showerror("Error", f"Ocurrió un error: {e}")

        def abrir_archivo():
            if self.selected_file:
                import os
                os.startfile(self.selected_file)
            else:
                messagebox.showwarning("Advertencia", "Primero selecciona un archivo.")

        btn_subir = ttk.Button(btn_frame, text="Subir archivo", style="Blue.TButton", command=subir_archivo)
        btn_subir.pack(side=tk.LEFT, padx=10)

        btn_procesar = ttk.Button(btn_frame, text="Procesar Excel", style="Yellow.TButton", command=procesar_excel)
        btn_procesar.pack(side=tk.LEFT, padx=10)

        btn_abrir = ttk.Button(btn_frame, text="Abrir archivo", style="Green.TButton", command=abrir_archivo)
        btn_abrir.pack(side=tk.LEFT, padx=10)

def limpiar_valor(valor):
    if pd.isna(valor):
        return 0.0
    try:
        return float(str(valor).replace(',', '').replace(' ', ''))
    except Exception:
        return 0.0

def convertir_excel(origen, destino):
    # Lee el archivo original
    df = pd.read_excel(origen, header=None)
    movimientos = []
    agrupados = {}

    i = 0
    while i < len(df):
        row = df.iloc[i]
        # Detecta fila de movimiento principal (tiene número, referencia y cuenta)
        if pd.notna(row[0]) and pd.notna(row[2]) and isinstance(row[2], str) and '-' in row[2]:
            numero = row[0]
            referencia = row[1]
            cuenta = row[2]
            nombre = row[3] if pd.notna(row[3]) else ""
            concepto = ""
            cargo = limpiar_valor(row[6]) if len(row) > 6 else 0.0
            abono = limpiar_valor(row[7]) if len(row) > 7 else 0.0

            # Busca el concepto en la siguiente fila si la columna de cuenta está vacía
            if i + 1 < len(df):
                next_row = df.iloc[i + 1]
                if pd.isna(next_row[2]) and pd.notna(next_row[4]):
                    concepto = str(next_row[4])
                    i += 1  # Salta la fila de concepto
                else:
                    concepto = nombre
            else:
                concepto = nombre

            # Agrupa por referencia y concepto (solo para la cuenta principal, ignora otras cuentas)
            clave = (referencia, concepto)
            if clave not in agrupados:
                agrupados[clave] = {
                    "numero": numero,
                    "referencia": referencia,
                    "cuenta": cuenta,
                    "concepto": concepto,
                    "nombre": "",
                    "cargos": 0.0,
                    "abonos": 0.0
                }
            agrupados[clave]["cargos"] += cargo
            agrupados[clave]["abonos"] += abono
        i += 1

    # Solo deja el primer movimiento por referencia y concepto (la cuenta principal)
    movimientos = []
    for v in agrupados.values():
        # Solo egresos: cargos > 0
        if v["cargos"] > 0:
            movimientos.append([
                v["numero"], v["referencia"], v["cuenta"], v["concepto"], v["nombre"],
                -abs(v["cargos"]), -abs(v["abonos"]), 0.00, 0.00
            ])

    columnas = ['No.', 'Refer.', 'Cuenta', 'Concepto', 'Nombre', 'Cargos', 'Abonos', 'ColExtra1', 'ColExtra2']
    df_out = pd.DataFrame(movimientos, columns=columnas)
    df_out.to_excel(destino, index=False)

if __name__ == "__main__":
    app = App()
    app.mainloop()